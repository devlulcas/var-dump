---
import { getAuth } from 'firebase-admin/auth';
import Layout from '../layouts/Layout.astro';
import { app } from '../lib/firebase/server';

/* Check if the user is authenticated */
const auth = getAuth(app);
if (Astro.cookies.has('session')) {
  const sessionCookie = Astro.cookies.get('session');
  const sessionCookieValue = sessionCookie
    ? sessionCookie.value
    : 'impossible-to-get';
  const decodedCookie = await auth.verifySessionCookie(sessionCookieValue);

  if (decodedCookie) {
    return Astro.redirect('/dashboard');
  }
}
---

<Layout title="Sign in">
  <h1>Sign in</h1>
  <p>New here? <a href="/register">Create an account</a></p>

  <form action="/api/auth/signin" method="post">
    <label for="email" for="email">Email</label>
    <input type="email" name="email" id="email" />
    <label for="password">Password</label>
    <input type="password" name="password" id="password" />
    <button type="submit">Login</button>
  </form>

  <button id="google">Sign in with Google</button>
</Layout>

<script>
  import {
    GoogleAuthProvider,
    getAuth,
    inMemoryPersistence,
    signInWithEmailAndPassword,
    signInWithPopup,
  } from 'firebase/auth';
  import { app } from '../lib/firebase/client';

  const auth = getAuth(app);

  // This will prevent the browser from storing session data
  auth.setPersistence(inMemoryPersistence);

  const form = document.querySelector<HTMLFormElement>('form');

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const email = formData.get('email')?.toString();
    const password = formData.get('password')?.toString();

    if (!email || !password) {
      return;
    }

    const userCredential = await signInWithEmailAndPassword(
      auth,
      email,
      password
    );

    const idToken = await userCredential.user.getIdToken();

    const response = await fetch('/api/auth/signin', {
      method: 'GET',
      headers: {
        Authorization: `Bearer ${idToken}`,
      },
    });

    if (response.redirected) {
      window.location.assign(response.url);
    }
  });

  const googleSignIn = document.querySelector<HTMLButtonElement>('#google');

  googleSignIn?.addEventListener('click', async () => {
    const provider = new GoogleAuthProvider();
    const userCredential = await signInWithPopup(auth, provider);
    const idToken = await userCredential.user.getIdToken();
    const res = await fetch('/api/auth/signin', {
      headers: {
        Authorization: `Bearer ${idToken}`,
      },
    });

    if (res.redirected) {
      window.location.assign(res.url);
    }
  });
</script>
